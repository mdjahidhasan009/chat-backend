import { OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { IConversationsService } from '../conversations/conversations';
import { IFriendsService } from '../friends/friends';
import { IGroupService } from '../groups/interfaces/group';
import { AuthenticatedSocket } from '../utils/interfaces';
import { Conversation, Group, GroupMessage, Message } from '../utils/typeorm';
import { AddGroupUserResponse, CallAcceptedPayload, CreateGroupMessageResponse, CreateMessageResponse, RemoveGroupUserResponse, CallHangUpPayload, VoiceCallPayload } from '../utils/types';
import { IGatewaySessionManager } from './gateway.session';
import { CreateCallDto } from './dto/CreateCallDto';
export declare class MessagingGateway implements OnGatewayConnection, OnGatewayDisconnect {
    readonly sessions: IGatewaySessionManager;
    private readonly conversationService;
    private readonly groupsService;
    private readonly friendsService;
    constructor(sessions: IGatewaySessionManager, conversationService: IConversationsService, groupsService: IGroupService, friendsService: IFriendsService);
    server: Server;
    handleConnection(socket: AuthenticatedSocket, ...args: any[]): void;
    handleDisconnect(socket: AuthenticatedSocket): void;
    handleGetOnlineGroupUsers(data: any, socket: AuthenticatedSocket): Promise<void>;
    handleCreateMessage(data: any): void;
    onConversationJoin(data: any, client: AuthenticatedSocket): void;
    onConversationLeave(data: any, client: AuthenticatedSocket): void;
    onGroupJoin(data: any, client: AuthenticatedSocket): void;
    onGroupLeave(data: any, client: AuthenticatedSocket): void;
    onTypingStart(data: any, client: AuthenticatedSocket): void;
    onTypingStop(data: any, client: AuthenticatedSocket): void;
    handleMessageCreateEvent(payload: CreateMessageResponse): void;
    handleConversationCreateEvent(payload: Conversation): void;
    handleMessageDelete(payload: any): Promise<void>;
    handleMessageUpdate(message: Message): Promise<void>;
    handleGroupMessageCreate(payload: CreateGroupMessageResponse): Promise<void>;
    handleGroupCreate(payload: Group): void;
    handleGroupMessageUpdate(payload: GroupMessage): void;
    handleGroupUserAdd(payload: AddGroupUserResponse): void;
    handleGroupUserRemove(payload: RemoveGroupUserResponse): void;
    handleGroupOwnerUpdate(payload: Group): void;
    handleGroupUserLeave(payload: any): boolean;
    handleFriendListRetrieve(data: any, socket: AuthenticatedSocket): Promise<void>;
    handleVideoCall(data: CreateCallDto, socket: AuthenticatedSocket): Promise<void>;
    handleVideoCallAccepted(data: CallAcceptedPayload, socket: AuthenticatedSocket): Promise<void>;
    handleSendingSignal(payload: any, socket: AuthenticatedSocket): Promise<void>;
    handleReturningSignal(payload: any, socket: AuthenticatedSocket): Promise<void>;
    handleVideoCallRejected(data: any, socket: AuthenticatedSocket): Promise<void>;
    handleVideoCallHangUp({ caller, receiver }: CallHangUpPayload, socket: AuthenticatedSocket): Promise<boolean>;
    handleVoiceCallInitiate(payload: VoiceCallPayload, socket: AuthenticatedSocket): Promise<void>;
    handleVoiceCallAccepted(payload: CallAcceptedPayload, socket: AuthenticatedSocket): Promise<void>;
    handleVoiceCallHangUp({ caller, receiver }: CallHangUpPayload, socket: AuthenticatedSocket): Promise<boolean>;
    handleVoiceCallRejected(data: any, socket: AuthenticatedSocket): Promise<void>;
}
